{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11740\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f0\fs32 \cf0 \expnd0\expndtw0\kerning0
Bank system program was designed with the utilization of some programs from previous assignments, the tokenizer and sorted-list with slight modifications to do perform particular tasks for this assignment.. 
\f1\fs24 \

\f0\fs32 Server Side:\uc0\u8232 Created two structs: 
\f1\fs24 \

\f0\fs32 1. Account struct to represent bank accounts, with a name, a balance, a boolean for active/inactive and a mutex. 
\f1\fs24 \

\f0\fs32 2. Client connection struct to encapsulate a client thread's connection to the server. Includes a connection file descriptor, a thread and a pointer to an account struct. 
\f1\fs24 \

\f0\fs32 We kept a hashtable of accounts with a maximum size of 20 and a linked list of client connections to manage our bank and an unlimited amount of clients connected to the server. To manage these data structures, we created two global mutexes to control multithreaded access and provide mutual exclusion in order to avoid inconsistent state manipulation over distinct threads. 
\f1\fs24 \

\f0\fs32 We had a number of helper functions to create accounts, close client connections, print the status of the bank and set up a timer, which we used to trigger a sigalarm and print the status of the bank every 20 seconds. 
\f1\fs24 \

\f0\fs32 Our server listens to incoming connections and when it finds one, it creates a client connection struct and a thread to run the client handler function for that connection. It tokenizes input that it reads from the socket descriptor to that connection and manages the data structures within the bank accordingly, regularly sending out information to the client. 
\f1\fs24 \

\f0\fs32 Client Side: 
\f1\fs24 \

\f0\fs32 Our client code involved the creation of two threads: one to manage each client connection thread and another to handle the input and response that would be exchanged between the client and the server. The handler function receives output from the server in messages and prints it out to the client, and the send input function listens for input and the quit command in the bank. 
\f1\fs24 \

\f0\fs32 Besides that, we have the standard socket address set-up functions and the constant listening in our main(), where the client takes in a hostname as a command line argument and attempts to connect to the given port (defined in bank.h) on said hostname every three seconds with the help of the sleep() function. The connection threads are shut down upon either the quit command or in the instance of the bank server shutting down from a SIGINT or something of the sort. 
\f1\fs24 \
}